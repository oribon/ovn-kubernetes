/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/ovn-org/ovn-kubernetes/go-controller/pkg/crd/servicefwmark/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceFWMarkLister helps list ServiceFWMarks.
// All objects returned here must be treated as read-only.
type ServiceFWMarkLister interface {
	// List lists all ServiceFWMarks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ServiceFWMark, err error)
	// ServiceFWMarks returns an object that can list and get ServiceFWMarks.
	ServiceFWMarks(namespace string) ServiceFWMarkNamespaceLister
	ServiceFWMarkListerExpansion
}

// serviceFWMarkLister implements the ServiceFWMarkLister interface.
type serviceFWMarkLister struct {
	indexer cache.Indexer
}

// NewServiceFWMarkLister returns a new ServiceFWMarkLister.
func NewServiceFWMarkLister(indexer cache.Indexer) ServiceFWMarkLister {
	return &serviceFWMarkLister{indexer: indexer}
}

// List lists all ServiceFWMarks in the indexer.
func (s *serviceFWMarkLister) List(selector labels.Selector) (ret []*v1.ServiceFWMark, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ServiceFWMark))
	})
	return ret, err
}

// ServiceFWMarks returns an object that can list and get ServiceFWMarks.
func (s *serviceFWMarkLister) ServiceFWMarks(namespace string) ServiceFWMarkNamespaceLister {
	return serviceFWMarkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceFWMarkNamespaceLister helps list and get ServiceFWMarks.
// All objects returned here must be treated as read-only.
type ServiceFWMarkNamespaceLister interface {
	// List lists all ServiceFWMarks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ServiceFWMark, err error)
	// Get retrieves the ServiceFWMark from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ServiceFWMark, error)
	ServiceFWMarkNamespaceListerExpansion
}

// serviceFWMarkNamespaceLister implements the ServiceFWMarkNamespaceLister
// interface.
type serviceFWMarkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceFWMarks in the indexer for a given namespace.
func (s serviceFWMarkNamespaceLister) List(selector labels.Selector) (ret []*v1.ServiceFWMark, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ServiceFWMark))
	})
	return ret, err
}

// Get retrieves the ServiceFWMark from the indexer for a given namespace and name.
func (s serviceFWMarkNamespaceLister) Get(name string) (*v1.ServiceFWMark, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("servicefwmark"), name)
	}
	return obj.(*v1.ServiceFWMark), nil
}
